#!/bin/bash

set -e

CFLAGS='-Wall -Wextra -Werror -Wpedantic -Ofast -std=c99'
DFLAGS='-Wall -Wextra -Werror  -Wpedantic -g3  -gdwarf-2 -DDEBUG -std=c99'
FREE='-ffreestanding -nostdlib -Wno-unused-function'
LDFLAGS=

CCS='gcc musl-gcc clang musl-clang tcc mingw-gcc'

function clean {    # Clean things
  rm -rf obj
  rm -rf release
  rm -rf debug
}

function _build_test {
  CC=$1

    case $CC in
      gcc)
        BLDFLAGS=-fwhole-program
        BCFLAGS="$CFLAGS -static"
        BDFLAGS="$DFLAGS -static"
        ;;
      musl-gcc)
        BLDFLAGS=-fwhole-program
        BCFLAGS="$CFLAGS -static"
        BDFLAGS="$DFLAGS -static"
        ;;
      clang)
        BLDFLAGS=-flto
        BCFLAGS="$CFLAGS -static"
        BDFLAGS="$DFLAGS -static"
        ;;
      musl-clang)
        BLDFLAGS=-flto
        BCFLAGS="$CFLAGS -static"
        BDFLAGS="$DFLAGS -static"
        ;;
      mingw-clang)
        BLDFLAGS=-flto
        BCFLAGS="$CFLAGS -static -target x86_64-w64-windows-gnu"
        BDFLAGS="$DFLAGS -static -target x86_64-w64-windows-gnu"
        ;;
      mingw-gcc)
        BLDFLAGS=-fwhole-program
        BCFLAGS="$CFLAGS -static"
        BDFLAGS="$DFLAGS -static"
        ;;
      tcc)
        BLDFLAGS=-fwhole-program
        BCFLAGS="$CFLAGS"
        BDFLAGS="$DFLAGS"
        ;;
    esac

  set -x
  # Check that it compiles fine freestanding
  $CC $BCFLAGS $FREE -c nostdctest.c -o obj/${CC}-nostdlib.o
  $CC $BDFLAGS $FREE -c nostdctest.c -o obj/${CC}-nostdlib.o

  # But then compile it with full link time optimization
  $CC $BCFLAGS $BLDFLAGS maintest.c -o release/${CC}_test
  $CC $BDFLAGS $BLDFLAGS maintest.c -o debug/${CC}_test
  set +x
}

function buildall {    # Build all combinations
  clean

  mkdir -p obj
  mkdir -p release
  mkdir -p debug

  for CC in $CCS; do
    _build_test $CC
  done
}

function checkall {    # Runs the tests
  buildall

  for exe in debug/* release/*;do 
    if [[ $exe != */mingw* ]]
    then
      echo $exe
      $exe
    fi
  done
}

function check {
  CC=musl-clang
  _build_test ${CC}
  debug/${CC}_test
  release/${CC}_test
}

function debug {
  check
  CC=musl-clang
  gdb --tui debug/${CC}_test
}
function linter { # Runs cppcheck on all files
  cppcheck --suppressions-list=suppressions.txt --inline-suppr --addon=misra.json libu.c
}

function help {     # Prints help
    echo "Usage: $0 <task> <args>"
    echo "Execute a task with the specified arguments."
    echo "By adding 'alias run=./Taskfile' you can then call it as 'run <task> <args>"
    echo
    echo "Tasks:"
    grep '^function .* #.* ' Taskfile | # Start with function and has # somewhere
      cut -d' ' -f 2- |                 # Remove the word 'function'
      tr -d '{' |                       # Remove '{}'
      sed 's/^/  /g' |                  # Indent by two spaces
      column --table --separator '#'    # column it using # as the separator
}

${@:-help}
